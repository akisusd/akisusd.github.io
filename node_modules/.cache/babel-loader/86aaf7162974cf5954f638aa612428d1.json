{"ast":null,"code":"import _classCallCheck from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/akos/Work/react/src/containers/Reddit.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions/redditActions';\nimport Picker from '../components/Picker';\nimport Posts from '../components/Posts';\n\nvar Reddit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Reddit, _Component);\n\n  function Reddit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Reddit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Reddit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleChange = function (nextSubreddit) {\n      _this.props.dispatch(selectSubreddit(nextSubreddit));\n    };\n\n    _this.handleRefreshClick = function (e) {\n      e.preventDefault();\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          selectedSubreddit = _this$props.selectedSubreddit;\n      dispatch(invalidateSubreddit(selectedSubreddit));\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    };\n\n    return _this;\n  }\n\n  _createClass(Reddit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          dispatch = _this$props2.dispatch,\n          selectedSubreddit = _this$props2.selectedSubreddit;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n        var _this$props3 = this.props,\n            dispatch = _this$props3.dispatch,\n            selectedSubreddit = _this$props3.selectedSubreddit;\n        dispatch(fetchPostsIfNeeded(selectedSubreddit));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          selectedSubreddit = _this$props4.selectedSubreddit,\n          posts = _this$props4.posts,\n          isFetching = _this$props4.isFetching,\n          lastUpdated = _this$props4.lastUpdated;\n      var isEmpty = posts.length === 0;\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Picker, {\n        value: selectedSubreddit,\n        onChange: this.handleChange,\n        options: ['reactjs', 'frontend'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, lastUpdated && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Last updated at \", new Date(lastUpdated).toLocaleTimeString(), \".\", ' '), !isFetching && React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.handleRefreshClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Refresh\")), isEmpty ? isFetching ? React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Loading...\") : React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Empty.\") : React.createElement(\"div\", {\n        style: {\n          opacity: isFetching ? 0.5 : 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Posts, {\n        posts: posts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Reddit;\n}(Component);\n\nReddit.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var selectedSubreddit = state.selectedSubreddit,\n      postsBySubreddit = state.postsBySubreddit;\n\n  var _ref = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  },\n      isFetching = _ref.isFetching,\n      lastUpdated = _ref.lastUpdated,\n      posts = _ref.items;\n\n  return {\n    selectedSubreddit: selectedSubreddit,\n    posts: posts,\n    isFetching: isFetching,\n    lastUpdated: lastUpdated\n  };\n};\n\nexport default connect(mapStateToProps)(Reddit);","map":{"version":3,"sources":["/home/akos/Work/react/src/containers/Reddit.js"],"names":["React","Component","PropTypes","connect","selectSubreddit","fetchPostsIfNeeded","invalidateSubreddit","Picker","Posts","Reddit","handleChange","nextSubreddit","props","dispatch","handleRefreshClick","e","preventDefault","selectedSubreddit","prevProps","posts","isFetching","lastUpdated","isEmpty","length","Date","toLocaleTimeString","opacity","propTypes","string","isRequired","array","bool","number","func","mapStateToProps","state","postsBySubreddit","items"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions/redditActions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass Reddit extends Component {\n  static propTypes = {\n    selectedSubreddit: PropTypes.string.isRequired,\n    posts: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    lastUpdated: PropTypes.number,\n    dispatch: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange = nextSubreddit => {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n  }\n\n  handleRefreshClick = e => {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    const isEmpty = posts.length === 0\n    return (\n      <div className='container-fluid'>\n        <Picker value={selectedSubreddit}\n                onChange={this.handleChange}\n                options={[ 'reactjs', 'frontend' ]} />\n        <p>\n          {lastUpdated &&\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n              {' '}\n            </span>\n          }\n          {!isFetching &&\n            <button className='btn btn-success' onClick={this.handleRefreshClick}>\n              Refresh\n            </button>\n          }\n        </p>\n        {isEmpty\n          ? (isFetching ? <h2>Loading...</h2> : <h2>Empty.</h2>)\n          : <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n              <Posts posts={posts} />\n            </div>\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const {\n    isFetching,\n    lastUpdated,\n    items: posts\n  } = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(Reddit)\n"]},"metadata":{},"sourceType":"module"}