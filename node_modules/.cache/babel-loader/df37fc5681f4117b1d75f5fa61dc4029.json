{"ast":null,"code":"import _defineProperty from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/akos/Work/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport tokenReducer from './tokenReducer';\nimport songsReducer from './songsReducer';\nimport userReducer from './userReducer';\nimport { SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT, REQUEST_POSTS, RECEIVE_POSTS } from '../actions/redditActions';\n\nvar selectedSubreddit = function selectedSubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'reactjs';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit;\n\n    default:\n      return state;\n  }\n};\n\nvar posts = function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return _objectSpread({}, state, {\n        didInvalidate: true\n      });\n\n    case REQUEST_POSTS:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      });\n\n    case RECEIVE_POSTS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar postsBySubreddit = function postsBySubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return _objectSpread({}, state, _defineProperty({}, action.subreddit, posts(state[action.subreddit], action)));\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  postsBySubreddit: postsBySubreddit,\n  tokenReducer: tokenReducer,\n  songsReducer: songsReducer,\n  userReducer: userReducer,\n  selectedSubreddit: selectedSubreddit\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/akos/Work/react/src/reducers/index.js"],"names":["combineReducers","tokenReducer","songsReducer","userReducer","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","selectedSubreddit","state","action","type","subreddit","posts","isFetching","didInvalidate","items","lastUpdated","receivedAt","postsBySubreddit","rootReducer"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SACEC,gBADF,EACoBC,oBADpB,EAEEC,aAFF,EAEiBC,aAFjB,QAGO,0BAHP;;AAKA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtB,SAAsB;AAAA,MAAXC,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,gBAAL;AACE,aAAOM,MAAM,CAACE,SAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAIA;AAAA,MAJCJ,KAID,uEAJS;AACrBK,IAAAA,UAAU,EAAE,KADS;AAErBC,IAAAA,aAAa,EAAE,KAFM;AAGrBC,IAAAA,KAAK,EAAE;AAHc,GAIT;AAAA,MAAXN,MAAW;;AACZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,oBAAL;AACE,+BACKI,KADL;AAEEM,QAAAA,aAAa,EAAE;AAFjB;;AAIF,SAAKT,aAAL;AACE,+BACKG,KADL;AAEEK,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,aAAa,EAAE;AAHjB;;AAKF,SAAKR,aAAL;AACE,+BACKE,KADL;AAEEK,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,aAAa,EAAE,KAHjB;AAIEC,QAAAA,KAAK,EAAEN,MAAM,CAACG,KAJhB;AAKEI,QAAAA,WAAW,EAAEP,MAAM,CAACQ;AALtB;;AAOF;AACE,aAAOT,KAAP;AArBJ;AAuBD,CA5BD;;AA8BA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAyB;AAAA,MAAxBV,KAAwB,uEAAhB,EAAgB;AAAA,MAAXC,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,oBAAL;AACA,SAAKE,aAAL;AACA,SAAKD,aAAL;AACE,+BACKG,KADL,sBAEGC,MAAM,CAACE,SAFV,EAEsBC,KAAK,CAACJ,KAAK,CAACC,MAAM,CAACE,SAAR,CAAN,EAA0BF,MAA1B,CAF3B;;AAIF;AACE,aAAOD,KAAP;AATJ;AAWD,CAZD;;AAcA,IAAMW,WAAW,GAAGpB,eAAe,CAAC;AAClCmB,EAAAA,gBAAgB,EAAhBA,gBADkC;AAElClB,EAAAA,YAAY,EAAZA,YAFkC;AAGlCC,EAAAA,YAAY,EAAZA,YAHkC;AAIlCC,EAAAA,WAAW,EAAXA,WAJkC;AAKlCK,EAAAA,iBAAiB,EAAjBA;AALkC,CAAD,CAAnC;AAQA,eAAeY,WAAf","sourcesContent":["import { combineReducers } from 'redux'\nimport tokenReducer from './tokenReducer';\nimport songsReducer from './songsReducer';\nimport userReducer from './userReducer';\nimport {\n  SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS, RECEIVE_POSTS\n} from '../actions/redditActions'\n\nconst selectedSubreddit = (state = 'reactjs', action) => {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nconst posts = (state = {\n  isFetching: false,\n  didInvalidate: false,\n  items: []\n}, action) => {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return {\n        ...state,\n        didInvalidate: true\n      }\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        isFetching: true,\n        didInvalidate: false\n      }\n    case RECEIVE_POSTS:\n      return {\n        ...state,\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      }\n    default:\n      return state\n  }\n}\n\nconst postsBySubreddit = (state = { }, action) => {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        [action.subreddit]: posts(state[action.subreddit], action)\n      }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  tokenReducer,\n  songsReducer,\n  userReducer,\n  selectedSubreddit\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}