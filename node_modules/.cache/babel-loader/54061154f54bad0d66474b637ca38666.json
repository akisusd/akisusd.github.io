{"ast":null,"code":"export var REQUEST_POSTS = 'REQUEST_POSTS';\nexport var RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport var SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\nexport var INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';\nexport var selectSubreddit = function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\nexport var invalidateSubreddit = function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\nexport var requestPosts = function requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit: subreddit\n  };\n};\nexport var receivePosts = function receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit: subreddit,\n    posts: json.data.children.map(function (child) {\n      return child.data;\n    }),\n    receivedAt: Date.now()\n  };\n};\n\nvar fetchPosts = function fetchPosts(subreddit) {\n  return function (dispatch) {\n    dispatch(requestPosts(subreddit));\n    return fetch(\"https://www.reddit.com/r/\".concat(subreddit, \".json\")).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return dispatch(receivePosts(subreddit, json));\n    });\n  };\n};\n\nvar shouldFetchPosts = function shouldFetchPosts(state, subreddit) {\n  var posts = state.postsBySubreddit[subreddit];\n\n  if (!posts) {\n    return true;\n  }\n\n  if (posts.isFetching) {\n    return false;\n  }\n\n  return posts.didInvalidate;\n};\n\nexport var fetchPostsIfNeeded = function fetchPostsIfNeeded(subreddit) {\n  return function (dispatch, getState) {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit));\n    }\n  };\n};","map":{"version":3,"sources":["/home/akos/Work/react/src/actions/redditActions.js"],"names":["REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","selectSubreddit","subreddit","type","invalidateSubreddit","requestPosts","receivePosts","json","posts","data","children","map","child","receivedAt","Date","now","fetchPosts","dispatch","fetch","then","response","shouldFetchPosts","state","postsBySubreddit","isFetching","didInvalidate","fetchPostsIfNeeded","getState"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,SAAS;AAAA,SAAK;AAC3CC,IAAAA,IAAI,EAAEJ,gBADqC;AAE3CG,IAAAA,SAAS,EAATA;AAF2C,GAAL;AAAA,CAAjC;AAKP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAF,SAAS;AAAA,SAAK;AAC/CC,IAAAA,IAAI,EAAEH,oBADyC;AAE/CE,IAAAA,SAAS,EAATA;AAF+C,GAAL;AAAA,CAArC;AAKP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAH,SAAS;AAAA,SAAK;AACxCC,IAAAA,IAAI,EAAEN,aADkC;AAExCK,IAAAA,SAAS,EAATA;AAFwC,GAAL;AAAA,CAA9B;AAKP,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACJ,SAAD,EAAYK,IAAZ;AAAA,SAAsB;AAChDJ,IAAAA,IAAI,EAAEL,aAD0C;AAEhDI,IAAAA,SAAS,EAATA,SAFgD;AAGhDM,IAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACH,IAAV;AAAA,KAA5B,CAHyC;AAIhDI,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJoC,GAAtB;AAAA,CAArB;;AAOP,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAd,SAAS;AAAA,SAAI,UAAAe,QAAQ,EAAI;AAC1CA,IAAAA,QAAQ,CAACZ,YAAY,CAACH,SAAD,CAAb,CAAR;AACA,WAAOgB,KAAK,oCAA6BhB,SAA7B,WAAL,CACJiB,IADI,CACC,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACb,IAAT,EAAJ;AAAA,KADT,EAEJY,IAFI,CAEC,UAAAZ,IAAI;AAAA,aAAIU,QAAQ,CAACX,YAAY,CAACJ,SAAD,EAAYK,IAAZ,CAAb,CAAZ;AAAA,KAFL,CAAP;AAGD,GAL2B;AAAA,CAA5B;;AAOA,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQpB,SAAR,EAAsB;AAC7C,MAAMM,KAAK,GAAGc,KAAK,CAACC,gBAAN,CAAuBrB,SAAvB,CAAd;;AACA,MAAI,CAACM,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAIA,KAAK,CAACgB,UAAV,EAAsB;AACpB,WAAO,KAAP;AACD;;AACD,SAAOhB,KAAK,CAACiB,aAAb;AACD,CATD;;AAWA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAxB,SAAS;AAAA,SAAI,UAACe,QAAD,EAAWU,QAAX,EAAwB;AACrE,QAAIN,gBAAgB,CAACM,QAAQ,EAAT,EAAazB,SAAb,CAApB,EAA6C;AAC3C,aAAOe,QAAQ,CAACD,UAAU,CAACd,SAAD,CAAX,CAAf;AACD;AACF,GAJ0C;AAAA,CAApC","sourcesContent":["export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport const selectSubreddit = subreddit => ({\n  type: SELECT_SUBREDDIT,\n  subreddit\n})\n\nexport const invalidateSubreddit = subreddit => ({\n  type: INVALIDATE_SUBREDDIT,\n  subreddit\n})\n\nexport const requestPosts = subreddit => ({\n  type: REQUEST_POSTS,\n  subreddit\n})\n\nexport const receivePosts = (subreddit, json) => ({\n  type: RECEIVE_POSTS,\n  subreddit,\n  posts: json.data.children.map(child => child.data),\n  receivedAt: Date.now()\n})\n\nconst fetchPosts = subreddit => dispatch => {\n  dispatch(requestPosts(subreddit))\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then(response => response.json())\n    .then(json => dispatch(receivePosts(subreddit, json)))\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  }\n  if (posts.isFetching) {\n    return false\n  }\n  return posts.didInvalidate\n}\n\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\n  if (shouldFetchPosts(getState(), subreddit)) {\n    return dispatch(fetchPosts(subreddit))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}