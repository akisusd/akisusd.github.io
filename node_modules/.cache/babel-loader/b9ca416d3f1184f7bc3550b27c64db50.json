{"ast":null,"code":"export function register(config) {\n  // The URL constructor is available in all browsers that support SW.\n  var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n  if (publicUrl.origin !== window.location.origin) {\n    // Our service worker won't work if PUBLIC_URL is on a different origin\n    // from what our page is served on. This might happen if a CDN is used to\n    // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n    return;\n  }\n\n  var CACHE_NAME = 'my-pwa-cache-v1';\n  var urlsToCache = ['/'];\n  window.addEventListener('install', function (event) {\n    event.waitUntil(caches.open(CACHE_NAME).then(function (cache) {\n      // Open a cache and cache our files\n      return cache.addAll(urlsToCache);\n    }));\n  });\n  window.addEventListener('fetch', function (event) {\n    console.log('asdfdsaf', event.request.url);\n    event.respondWith(caches.match(event.request).then(function (response) {\n      return response || fetch(event.request);\n    }));\n  });\n  window.addEventListener('load', function () {\n    var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker-test.js\");\n    console.log('swUrl', swUrl);\n    checkValidServiceWorker(swUrl, config);\n    registerValidSW(swUrl, config);\n  });\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/akos/Work/akisusd.github.io/src/serviceWorker.js"],"names":["register","config","publicUrl","URL","process","env","PUBLIC_URL","window","location","href","origin","CACHE_NAME","urlsToCache","addEventListener","event","waitUntil","caches","open","then","cache","addAll","console","log","request","url","respondWith","match","response","fetch","swUrl","checkValidServiceWorker","registerValidSW","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","contentType","headers","get","status","indexOf","ready","unregister","reload"],"mappings":"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","sourcesContent":["export function register(config) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    var CACHE_NAME = 'my-pwa-cache-v1';\n    var urlsToCache = [\n      '/'\n    ];\n\n    window.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(CACHE_NAME)\n          .then(function(cache) {\n            // Open a cache and cache our files\n            return cache.addAll(urlsToCache);\n          })\n      );\n    });\n\n    window.addEventListener('fetch', function(event) {\n      console.log('asdfdsaf',event.request.url);\n      event.respondWith(\n          caches.match(event.request).then(function(response) {\n              return response || fetch(event.request);\n          })\n      );\n    });\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-test.js`;\n      console.log('swUrl',swUrl);\n      checkValidServiceWorker(swUrl, config);\n      registerValidSW(swUrl, config);\n    });\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}